#!/bin/bash

# List of Pokémon
pokemon_list=(bulbasaur ivysaur venusaur charmander charmeleon)

# Output directory
OUTPUT_DIR="pokemon_data"
mkdir -p "$OUTPUT_DIR"

# Max retries
MAX_RETRIES=3

# Timeout (in seconds) for each job
TIMEOUT=15

# Store PIDs of background jobs
declare -A JOB_PIDS

# Function to fetch data with retries
fetch_pokemon_data() {
    local pokemon=$1
    local attempt=1
    local success=false

    while [ $attempt -le $MAX_RETRIES ]; do
        echo "Fetching data for $pokemon (Attempt $attempt)..."
        API_URL="https://pokeapi.co/api/v2/pokemon/$pokemon"
        OUTPUT_FILE="${OUTPUT_DIR}/${pokemon}.json"

        curl -s -f --max-time 10 "$API_URL" -o "$OUTPUT_FILE"
        if [ $? -eq 0 ]; then
            echo "Saved data to $OUTPUT_FILE ✅"
            success=true
            break
        else
            echo "Attempt $attempt failed for $pokemon ❌"
            sleep 2
        fi
        attempt=$((attempt + 1))
    done

    if [ "$success" = false ]; then
        echo "[$(date)] Failed to fetch data for $pokemon after $MAX_RETRIES attempts" >> errors.txt
    fi
}

# Clear previous error log
> errors.txt

# Launch each fetch in background and track PID
for pokemon in "${pokemon_list[@]}"; do
    fetch_pokemon_data "$pokemon" &
    pid=$!
    JOB_PIDS["$pokemon"]=$pid
done

# Start a timer
start_time=$(date +%s)

echo -e "\n🔄 Waiting for all background jobs to finish..."

for pokemon in "${!JOB_PIDS[@]}"; do
    pid=${JOB_PIDS[$pokemon]}

    (
        # Polling loop to enforce timeout
        while kill -0 "$pid" 2>/dev/null; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))

            if [ "$elapsed" -gt "$TIMEOUT" ]; then
                echo "⛔ Timeout reached. Killing fetch for $pokemon (PID $pid)..."
                kill -9 "$pid" 2>/dev/null
                echo "[$(date)] Killed fetch process for $pokemon due to timeout" >> errors.txt
                break
            fi
            sleep 1
        done
    ) &
done

# Final wait to clean up all background fetches and monitors
wait

echo -e "\n✅ All Pokémon fetch jobs completed (parallel mode with kill safety)"